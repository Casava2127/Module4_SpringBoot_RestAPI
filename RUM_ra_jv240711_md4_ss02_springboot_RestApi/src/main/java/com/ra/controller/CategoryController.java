package com.ra.controller; // ƒê·ªãnh nghƒ©a package c·ªßa controller

import com.ra.model.dto.DataError; // Import l·ªõp DataError ƒë·ªÉ x·ª≠ l√Ω l·ªói
import com.ra.model.entity.Category; // Import entity Category (t∆∞∆°ng ·ª©ng v·ªõi b·∫£ng Category trong database)
import com.ra.service.category.CategoryService; // Import service ƒë·ªÉ thao t√°c v·ªõi d·ªØ li·ªáu
import org.springframework.beans.factory.annotation.Autowired; // Import annotation ƒë·ªÉ t·ª± ƒë·ªông inject dependencies
import org.springframework.http.HttpStatus; // Import HttpStatus ƒë·ªÉ tr·∫£ v·ªÅ m√£ tr·∫°ng th√°i HTTP
import org.springframework.http.ResponseEntity; // Import ResponseEntity ƒë·ªÉ t·∫°o ph·∫£n h·ªìi HTTP
import org.springframework.web.bind.annotation.*; // Import c√°c annotation c·ªßa Spring Boot
import java.util.List; // Import List ƒë·ªÉ l√†m vi·ªác v·ªõi danh s√°ch d·ªØ li·ªáu
// dinh nghia cac API endPoint
@RestController // ƒê√°nh d·∫•u l·ªõp n√†y l√† RESTful Controller, x·ª≠ l√Ω API
@RequestMapping("/api/v1/categories") // ƒê·ªãnh nghƒ©a URL g·ªëc cho t·∫•t c·∫£ API trong controller n√†y
public class CategoryController {

    @Autowired // T·ª± ƒë·ªông inject bean CategoryService v√†o controller
    private CategoryService categoryService;

    // üìå METHOD: GET - L·∫•y t·∫•t c·∫£ danh m·ª•c
    // URL: localhost:8080/api/v1/categories
    @GetMapping // X·ª≠ l√Ω request GET "/api/v1/categories"
    public ResponseEntity<List<Category>> index() {
        List<Category> categories = categoryService.findAll(); // G·ªçi service ƒë·ªÉ l·∫•y danh s√°ch category
        return new ResponseEntity<>(categories, HttpStatus.OK); // Tr·∫£ v·ªÅ danh s√°ch category v√† m√£ 200 (OK)
    }

    // üìå METHOD: GET - L·∫•y danh m·ª•c theo ID
    // URL: localhost:8080/api/v1/categories/{id}
    @GetMapping("/{id}") // X·ª≠ l√Ω request GET "/api/v1/categories/{id}"
    public ResponseEntity<?> show(@PathVariable Long id) { // D·∫•u ? c√≥ th·ªÉ tr·∫£ v·ªÅ nhi·ªÅu ki·ªÉu d·ªØ li·ªáu kh√°c nhau
        Category category = categoryService.findById(id); // G·ªçi service ƒë·ªÉ t√¨m category theo ID
        if (category == null) {
            // N·∫øu kh√¥ng t√¨m th·∫•y, tr·∫£ v·ªÅ l·ªói 404 v·ªõi th√¥ng b√°o
            return new ResponseEntity<>(new DataError("category b·ªã l·ªói r·ªìi nhaaa", 404), HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<>(category, HttpStatus.OK); // Tr·∫£ v·ªÅ category v√† m√£ 200 (OK)
    }

    // üìå METHOD: POST - Th√™m m·ªõi danh m·ª•c
    // URL: localhost:8080/api/v1/categories/add
    @PostMapping("/add") // X·ª≠ l√Ω request POST "/api/v1/categories/add"
    public ResponseEntity<Category> create(@RequestBody Category category) { // v√¨ g·ª≠i t·ª´ body c·ªßa PostMan
        Category newCategory = categoryService.save(category); // G·ªçi service ƒë·ªÉ l∆∞u category m·ªõi
        return new ResponseEntity<>(newCategory, HttpStatus.CREATED); // Tr·∫£ v·ªÅ d·ªØ li·ªáu m·ªõi v√† m√£ 201 (Created)
    }

    // üìå METHOD: PUT - C·∫≠p nh·∫≠t danh m·ª•c
    // URL: localhost:8080/api/v1/categories/update/{id}
    // Request body: {
    //    "categoryName": "categoryUpdated",
    //    "categoryStatus": false
    // }
    // Response: Tr·∫£ v·ªÅ category ƒë√£ c·∫≠p nh·∫≠t ho·∫∑c 404 n·∫øu kh√¥ng t√¨m th·∫•y
    @PutMapping("/update/{id}") // X·ª≠ l√Ω request PUT "/api/v1/categories/update/{id}"
    public ResponseEntity<Category> update(@PathVariable Long id, @RequestBody Category category) {
        Category existingCategory = categoryService.findById(id); // Ki·ªÉm tra category c√≥ t·ªìn t·∫°i kh√¥ng
        if (existingCategory == null) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND); // Tr·∫£ v·ªÅ m√£ 404 n·∫øu kh√¥ng t√¨m th·∫•y
        }
        // C·∫≠p nh·∫≠t th√¥ng tin
        existingCategory.setCategoryName(category.getCategoryName());
        existingCategory.setCategoryStatus(category.getCategoryStatus());
        Category updatedCategory = categoryService.save(existingCategory); // L∆∞u thay ƒë·ªïi
        return new ResponseEntity<>(updatedCategory, HttpStatus.OK); // Tr·∫£ v·ªÅ category ƒë√£ c·∫≠p nh·∫≠t v√† m√£ 200 (OK)
    }

    // üìå METHOD: DELETE - X√≥a danh m·ª•c
    // URL: localhost:8080/api/v1/categories/delete/{id}
    // Response: 204 No Content n·∫øu x√≥a th√†nh c√¥ng, 404 n·∫øu kh√¥ng t·ªìn t·∫°i
    @DeleteMapping("/delete/{id}") // X·ª≠ l√Ω request DELETE "/api/v1/categories/delete/{id}"
    public ResponseEntity<Void> delete(@PathVariable Long id) {
        Category category = categoryService.findById(id); // Ki·ªÉm tra category c√≥ t·ªìn t·∫°i kh√¥ng
        if (category == null) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND); // Tr·∫£ v·ªÅ m√£ 404 n·∫øu kh√¥ng t√¨m th·∫•y
        }
        categoryService.delete(id); // G·ªçi service ƒë·ªÉ x√≥a category
        return new ResponseEntity<>(HttpStatus.NO_CONTENT); // Tr·∫£ v·ªÅ m√£ 204 (No Content) n·∫øu x√≥a th√†nh c√¥ng
    }
}
